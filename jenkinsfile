pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Nava200/branch-automation.git'
        GIT_CREDENTIALS = 'github-automation'
        BRANCH_THRESHOLD_DAYS = 30  // Set the threshold for branch deletion in days
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    echo 'Checking out the repository'
                    checkout scm
                }
            }
        }

        stage('Verify Git Branches') {
            steps {
                script {
                    echo 'Fetching all remote branches'
                    sh 'git fetch --all'
                    def branches = sh(script: 'git branch -r', returnStdout: true).trim().split("\n")
                    echo "Fetched branches: ${branches}"

                    // For each branch, check the commit date
                    for (branch in branches) {
                        if (branch.startsWith("origin/")) {
                            def branchName = branch.replace("origin/", "")
                            echo "Checking branch: ${branchName}"
                            def lastCommitDate = sh(script: "git log -1 --format=%cd ${branch}", returnStdout: true).trim()
                            echo "Last commit date for ${branchName}: ${lastCommitDate}"

                            // Parse the commit date and calculate days since last commit
                            def format = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy Z")
                            def branchCommitDate = format.parse(lastCommitDate)
                            def currentDate = new Date()

                            // Calculate the difference in days
                            def diffInMillis = currentDate.getTime() - branchCommitDate.getTime()
                            def diffInDays = (diffInMillis / (1000 * 60 * 60 * 24))

                            echo "The branch ${branchName} was last committed on ${lastCommitDate}. It was ${diffInDays} days ago."

                            // Check if the branch is older than the threshold
                            if (diffInDays > env.BRANCH_THRESHOLD_DAYS.toInteger()) {
                                echo "Branch ${branchName} is older than ${env.BRANCH_THRESHOLD_DAYS} days."
                                // Add logic for archiving or deleting the branch
                            } else {
                                echo "Branch ${branchName} is within the threshold."
                            }
                        }
                    }
                }
            }
        }

        stage('Notify Teams') {
            when {
                expression { return currentBuild.result == 'FAILURE' }
            }
            steps {
                echo 'Notifying teams about the failure'
                // Add logic to notify teams, e.g., send an email or Slack notification
                // Example: 
                // mail to: 'navaneetha.22june@gmail.com', subject: 'Pipeline Failure Notification', body: 'The branch automation pipeline has failed.'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed, check logs for details'
        }
    }
}
