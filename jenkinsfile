pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Nava200/branch-automation.git'
        GIT_CREDENTIALS = 'github-automation'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    echo 'Checking out the repository'
                    checkout scm
                }
            }
        }

        stage('Verify Git Branches') {
            steps {
                script {
                    echo 'Fetching all remote branches'
                    sh 'git fetch --all'
                    def branches = sh(script: 'git branch -r', returnStdout: true).trim().split("\n")
                    echo "Fetched branches: ${branches}"

                    // For each branch, check the commit date
                    for (branch in branches) {
                        if (branch.startsWith("origin/")) {
                            def branchName = branch.replace("origin/", "")
                            echo "Checking branch: ${branchName}"
                            def lastCommitDate = sh(script: "git log -1 --format=%cd ${branch}", returnStdout: true).trim()
                            echo "Last commit date for ${branchName}: ${lastCommitDate}"
                            
                            // Add any logic for deciding whether to delete or archive the branch
                            // Example: Check if branch is older than 30 days (you can customize this)
                            def lastCommitTime = Date.parse("yyyy-MM-dd", lastCommitDate)
                            def currentTime = new Date()
                            def diffInDays = (currentTime - lastCommitTime) / (1000 * 60 * 60 * 24)
                            if (diffInDays > 30) {
                                echo "Branch ${branchName} is older than 30 days and can be deleted"
                                // Add deletion or archival logic here
                            } else {
                                echo "Branch ${branchName} is still active"
                            }
                        }
                    }
                }
            }
        }

        stage('Notify Teams') {
            when {
                expression { return currentBuild.result == 'FAILURE' }
            }
            steps {
                echo 'Notifying teams about the failure'
                // Add logic to notify teams, e.g., send an email or Slack notification
            }
        }

    }

    post {
        always {
            echo 'Cleaning up workspace'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed, check logs for details'
        }
    }
}
