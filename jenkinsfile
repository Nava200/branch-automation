pipeline {
    agent any
    
    environment {
        GITHUB_CREDENTIALS = 'github-automation'  // GitHub credentials ID for Jenkins
        REPO_URL = 'https://github.com/Nava200/branch-automation.git'
        BRANCH_NAME = 'main'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    // Checkout the Git repository using the defined GitHub credentials
                    checkout([$class: 'GitSCM', 
                        branches: [[name: "*/${BRANCH_NAME}"]],
                        userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: "${GITHUB_CREDENTIALS}"]]
                    ])
                }
            }
        }

        stage('Identify Branches') {
            steps {
                script {
                    // Get the list of remote branches
                    def branches = sh(script: "git branch -r", returnStdout: true).trim().split("\n")
                    def branchesToArchive = []
                    def branchesToDelete = []
                    
                    // Get the last commit date of the main branch in a standardized format (YYYY-MM-DD HH:MM:SS)
                    def lastCommitDate = sh(script: "git show -s --format=%ci origin/main", returnStdout: true).trim()
                    
                    // Convert the date to seconds using a format that `date` can process
                    def commitTimestamp = sh(script: "date -d '${lastCommitDate}' +%s", returnStdout: true).trim()
                    def currentTimestamp = sh(script: "date +%s", returnStdout: true).trim()

                    // Calculate the age of the branch in hours
                    def ageInSeconds = currentTimestamp.toInteger() - commitTimestamp.toInteger()
                    def ageInHours = ageInSeconds / (60 * 60)
                    
                    // Archive branches older than 15 hours
                    if (ageInHours > 15) {
                        branchesToArchive.add(branches)
                    }

                    // Delete branches older than 30 hours
                    if (ageInHours > 30) {
                        branchesToDelete.add(branches)
                    }
                    
                    // Output results
                    echo "Branches to archive: ${branchesToArchive}"
                    echo "Branches to delete: ${branchesToDelete}"
                    
                    // Save the branches lists as environment variables
                    env.BRANCHES_TO_ARCHIVE = branchesToArchive.join(",")
                    env.BRANCHES_TO_DELETE = branchesToDelete.join(",")
                }
            }
        }

        stage('Notify Teams') {
    steps {
        script {
            // Send email notification regardless of whether branches were found or not
            if (env.BRANCHES_TO_ARCHIVE || env.BRANCHES_TO_DELETE) {
                if (env.BRANCHES_TO_ARCHIVE) {
                    emailext subject: "Branches to Archive", body: "Branches to archive: ${env.BRANCHES_TO_ARCHIVE}", to: "navaneetha.22june@gmail.com"
                }
                if (env.BRANCHES_TO_DELETE) {
                    emailext subject: "Branches to Delete", body: "Branches to delete: ${env.BRANCHES_TO_DELETE}", to: "navaneetha.22june@gmail.com"
                }
            } else {
                // Send email even if no branches are archived or deleted
                emailext subject: "No Branches Archived or Deleted", body: "No branches met the criteria for archiving or deletion.", to: "navaneetha.22june@gmail.com"
            }
        }
    }
}


        stage('Archive Branches') {
            steps {
                script {
                    if (env.BRANCHES_TO_ARCHIVE) {
                        def branchesToArchive = env.BRANCHES_TO_ARCHIVE.split(",")
                        branchesToArchive.each { branch ->
                            // Archive the branch
                            echo "Archiving branch: ${branch}"
                            // Replace this with actual archiving logic if needed
                        }
                    }
                }
            }
        }

        stage('Delete Branches') {
            steps {
                script {
                    if (env.BRANCHES_TO_DELETE) {
                        def branchesToDelete = env.BRANCHES_TO_DELETE.split(",")
                        branchesToDelete.each { branch ->
                            // Delete the branch
                            echo "Deleting branch: ${branch}"
                            // Replace this with actual deletion logic if needed
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after the pipeline runs
        }
    }
}
