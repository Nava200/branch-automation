pipeline {
    agent any
    environment {
        GIT_REPO = 'https://github.com/Nava200/branch-automation.git'
        GIT_CREDENTIALS = 'github-automation'
    }

    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    checkout scm: [
                        $class: 'GitSCM',
                        branches: [[name: 'origin/main']],
                        userRemoteConfigs: [[url: GIT_REPO, credentialsId: GIT_CREDENTIALS]]
                    ]
                }
            }
        }

        stage('Identify Branches') {
            steps {
                script {
                    def archiveBranches = []
                    def deleteBranches = []

                    // Get all branches
                    def branches = sh(script: 'git branch -r', returnStdout: true).trim().split("\n")
                    branches.each { branch ->
                        if (branch.startsWith("origin/")) {
                            def branchName = branch.replace("origin/", "").trim()
                            def lastCommitDate = sh(script: "git log -1 --format=%cd ${branch}", returnStdout: true).trim()
                            def commitDate = Date.parse("EEE MMM dd HH:mm:ss yyyy Z", lastCommitDate)
                            def diffInDays = (new Date() - commitDate) / (1000 * 60 * 60 * 24)

                            if (diffInDays > 15) {
                                archiveBranches.add(branchName)
                            }
                            if (diffInDays > 30) {
                                deleteBranches.add(branchName)
                            }
                        }
                    }

                    env.BRANCHES_TO_ARCHIVE = archiveBranches.join(', ')
                    env.BRANCHES_TO_DELETE = deleteBranches.join(', ')
                }
            }
        }

        stage('Notify Teams') {
            steps {
                script {
                    emailext(
                        subject: "Branches to Archive/Delete",
                        body: """
                            Branches to archive: ${env.BRANCHES_TO_ARCHIVE}
                            Branches to delete: ${env.BRANCHES_TO_DELETE}
                        """,
                        to: "navaneetha.22june@gmail.com"
                    )
                }
            }
        }

        stage('Archive Branches') {
            when {
                expression { return env.BRANCHES_TO_ARCHIVE != '' }
            }
            steps {
                script {
                    def branchesToArchive = env.BRANCHES_TO_ARCHIVE.split(', ')
                    branchesToArchive.each { branch ->
                        // Archiving logic (e.g., tag the branch)
                        sh "git checkout ${branch}"
                        sh "git tag archived-${branch}"
                    }
                }
            }
        }

        stage('Delete Branches') {
            when {
                expression { return env.BRANCHES_TO_DELETE != '' }
            }
            steps {
                script {
                    def branchesToDelete = env.BRANCHES_TO_DELETE.split(', ')
                    branchesToDelete.each { branch ->
                        // Deletion logic
                        sh "git push origin --delete ${branch}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
