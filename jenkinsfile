pipeline {
    agent any
    stages {
        stage('Verify Git Branches') {
            steps {
                script {
                    echo "Fetching all remote branches"
                    sh "git -C repo--587256863 fetch --all"
                    def branches = sh(script: "git -C repo--587256863 branch -r", returnStdout: true).trim().split("\n")
                    echo "Fetched branches: ${branches}"
                    
                    def branchesToArchive = []
                    def branchesToDelete = []
                    def currentDate = new Date()

                    // Loop through each branch and check the commit date
                    branches.each { branch ->
                        if (branch.startsWith("origin/")) {
                            def branchName = branch.replace("origin/", "")
                            echo "Checking branch: ${branchName}"
                            def branchDate = sh(script: "git -C repo--587256863 log -1 --format=%cd ${branch}", returnStdout: true).trim()
                            def branchCommitDate = Date.parse("EEE MMM dd HH:mm:ss yyyy Z", branchDate)
                            
                            // Archive branches older than 10 days
                            if ((currentDate - branchCommitDate) > 10) {
                                branchesToArchive.add(branchName)
                            }
                            
                            // Delete branches older than 20 days
                            if ((currentDate - branchCommitDate) > 20) {
                                branchesToDelete.add(branchName)
                            }
                        }
                    }
                    
                    echo "Branches to archive: ${branchesToArchive}"
                    echo "Branches to delete: ${branchesToDelete}"
                    
                    // Pass these branches to the next steps
                    env.BRANCHES_TO_ARCHIVE = branchesToArchive.join(',')
                    env.BRANCHES_TO_DELETE = branchesToDelete.join(',')
                }
            }
        }

        stage('Identify Branches to Archive/Remove') {
            steps {
                script {
                    // Archive the branches
                    if (env.BRANCHES_TO_ARCHIVE) {
                        echo "Archiving the following branches: ${env.BRANCHES_TO_ARCHIVE}"
                        // Example backup process (create a backup of the branches before deletion)
                        def backupBranchScript = """
                            git -C repo--587256863 checkout -b backup-branches
                            git -C repo--587256863 push origin backup-branches
                        """
                        sh script: backupBranchScript, returnStdout: true
                        
                        // Here you could implement any archiving logic (e.g., move to another repo or create a file backup)
                    }

                    // Delete the branches
                    if (env.BRANCHES_TO_DELETE) {
                        echo "Deleting the following branches: ${env.BRANCHES_TO_DELETE}"
                        // Example delete command (ensure you have the correct permission to delete)
                        env.BRANCHES_TO_DELETE.split(',').each { branch ->
                            sh "git -C repo--587256863 push origin --delete ${branch}"
                        }
                    }
                }
            }
        }
        
        stage('Notify Teams') {
            steps {
                emailext(
                    subject: "Branch Automation - Action Summary",
                    body: "The following branches were archived: ${env.BRANCHES_TO_ARCHIVE}\nThe following branches were deleted: ${env.BRANCHES_TO_DELETE}",
                    to: "navaneetha.22june@gmail.com"
                )
            }
        }
    }
}
