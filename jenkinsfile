pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Nava200/branch-automation.git'
        GIT_CREDENTIALS = 'github-automation'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    echo 'Checking out the repository'
                    checkout scm
                }
            }
        }

        stage('Verify Git Branches') {
            steps {
                script {
                    echo 'Fetching all remote branches'
                    sh 'git fetch --all'
                    def branches = sh(script: 'git branch -r', returnStdout: true).trim().split("\n")
                    echo "Fetched branches: ${branches}"

                    // Initialize counters for archived and deleted branches
                    def archivedCount = 0
                    def deletedCount = 0

                    // For each branch, check the commit date
                    for (branch in branches) {
                        if (branch.startsWith("origin/")) {
                            def branchName = branch.replace("origin/", "")
                            echo "Checking branch: ${branchName}"
                            def lastCommitDate = sh(script: "git log -1 --format=%cd ${branch}", returnStdout: true).trim()
                            echo "Last commit date for ${branchName}: ${lastCommitDate}"

                            // Add any logic for deciding whether to delete or archive the branch
                            // Example: Check if branch is older than 30 days (you can customize this)
                            def lastCommitTime = Date.parse("yyyy-MM-dd", lastCommitDate)
                            def currentTime = new Date()
                            def diffInDays = (currentTime - lastCommitTime) / (1000 * 60 * 60 * 24)
                            if (diffInDays > 30) {
                                echo "Branch ${branchName} is older than 30 days and will be deleted"
                                // Simulate branch deletion (for real deletion, use git or GitHub API)
                                deletedCount++
                                // Delete the branch (Uncomment this if you want to actually delete it)
                                // sh "git push origin --delete ${branchName}"
                            } else {
                                echo "Branch ${branchName} is still active and will be archived"
                                archivedCount++
                                // Add logic for archiving the branch (e.g., moving the branch to an archive folder)
                            }
                        }
                    }

                    // Set the variables so they can be used in email notification
                    currentBuild.description = "Archived: ${archivedCount}, Deleted: ${deletedCount}"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed, check logs for details'
        }

        // Send email notification after the pipeline is complete
        always {
            script {
                emailext (
                    subject: "Jenkins Pipeline: ${currentBuild.fullDisplayName} - ${currentBuild.result}",
                    body: """
                        The Jenkins pipeline ${currentBuild.fullDisplayName} has finished with result: ${currentBuild.result}.
                        
                        Number of branches archived: ${archivedCount}
                        Number of branches deleted: ${deletedCount}
                        
                        Please check the logs for details.
                    """,
                    to: "navaneetha.22june@gmail.com" // Replace with your actual email address
                )
            }
        }
    }
}
