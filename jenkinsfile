pipeline {
    agent any

    environment {
        // Define the Git credentials ID stored in Jenkins
        GIT_CREDENTIALS = 'github-automation'
        REPO = 'https://github.com/Nava200/branch-automation.git' // List of repositories to check
        BRANCHES_TO_ARCHIVE = ''  // Placeholder for storing branches to archive
        BRANCHES_TO_DELETE = ''  // Placeholder for storing branches to delete
    }

    stages {
        stage('Checkout Repositories') {
            steps {
                script {
                    // Checkout each repository
                    REPOS.each { repo ->
                        echo "Cloning repository: ${repo}"
                        dir("repo-${repo.hashCode()}") {  // Ensures each repo is cloned to a unique folder
                            checkout scm: [
                                $class: 'GitSCM',
                                branches: [[name: '*/main']],
                                userRemoteConfigs: [[url: repo, credentialsId: GIT_CREDENTIALS]]
                            ]
                        }
                    }
                }
            }
        }

        stage('Identify Branches to Archive/Remove') {
            steps {
                script {
                    def archiveBranches = []
                    def deleteBranches = []

                    REPOS.each { repo ->
                        def repoDir = "repo-${repo.hashCode()}"
                        
                        // Fetch all remote branches for each repository
                        def branches = sh(script: "git -C ${repoDir} branch -r", returnStdout: true).trim().split("\n")
                        def commitDate = sh(script: "git -C ${repoDir} log -1 --format=%cd origin/main", returnStdout: true).trim()

                        // Parse the commit date using SimpleDateFormat
                        def sdf = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy Z")
                        def parsedDate = sdf.parse(commitDate)

                        // Example condition for archiving: branches with "feature" in the name
                        branches.each { branch ->
                            if (branch.contains("feature")) {
                                archiveBranches.add(branch)
                            }
                            // Example condition for deletion: branches older than a certain date or with "obsolete" in the name
                            if (branch.contains("obsolete") || isOlderThan(parsedDate, branch, repoDir)) {
                                deleteBranches.add(branch)
                            }
                        }
                    }

                    // Set the archive and delete lists to environment variables
                    env.BRANCHES_TO_ARCHIVE = archiveBranches.join(', ')
                    env.BRANCHES_TO_DELETE = deleteBranches.join(', ')

                    echo "Branches to archive: ${env.BRANCHES_TO_ARCHIVE}"
                    echo "Branches to delete: ${env.BRANCHES_TO_DELETE}"
                }
            }
        }

        stage('Notify Teams') {
            steps {
                script {
                    // Send email notifications about the branches to archive or delete
                    emailext(
                        subject: "Branches to Archive/Remove",
                        body: "Following branches need to be archived: ${env.BRANCHES_TO_ARCHIVE}\n\n" +
                              "Following branches are identified for deletion: ${env.BRANCHES_TO_DELETE}",
                        to: "navaneetha.22june@gmail.com"  // Replace with actual recipient email(s)
                    )
                }
            }
        }
    }
}

def isOlderThan(Date commitDate, String branch, String repoDir) {
    // Example logic to check if a branch is older than a specific date
    def branchDate = sh(script: "git -C ${repoDir} log -1 --format=%cd origin/${branch}", returnStdout: true).trim()
    def sdf = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy Z")
    def parsedBranchDate = sdf.parse(branchDate)

    // Compare commit date with branch date
    return parsedBranchDate.before(commitDate)
}
