pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = 'github-automation'  // GitHub credentials ID for Jenkins
        REPO_URL = 'https://github.com/Nava200/branch-automation.git'
        BRANCH_NAME = 'main'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    // Checkout the Git repository using the defined GitHub credentials
                    checkout([$class: 'GitSCM', 
                        branches: [[name: "*/${BRANCH_NAME}"]], 
                        userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: "${GITHUB_CREDENTIALS}"]]
                    ])
                }
            }
        }

        stage('Identify Branches') {
            steps {
                script {
                    // Get the list of remote branches, stripping the 'origin/' prefix
                    def branches = sh(script: "git branch -r", returnStdout: true).trim().split("\n")
                    def branchesToArchive = []
                    def branchesToDelete = []

                    // Loop through each branch and get the last commit date
                    branches.each { branch ->
                        def branchName = branch.trim().replace('origin/', '')

                        // Skip if it's the main branch
                        if (branchName == "main") {
                            return
                        }

                        // Get the last commit date for each branch
                        def lastCommitDate = sh(script: "git show -s --format=%ci origin/${branchName}", returnStdout: true).trim()
                        def commitTimestamp = sh(script: "date -d '${lastCommitDate}' +%s", returnStdout: true).trim()
                        def currentTimestamp = sh(script: "date +%s", returnStdout: true).trim()

                        // Calculate the age of the branch in minutes
                        def ageInSeconds = currentTimestamp.toInteger() - commitTimestamp.toInteger()
                        def ageInMinutes = ageInSeconds / 60

                        // Archive branches older than 90 minutes
                        if (ageInMinutes > 90) {
                            branchesToArchive.add(branchName)
                        }

                        // Delete branches older than 180 minutes
                        if (ageInMinutes > 180) {
                            branchesToDelete.add(branchName)
                        }
                    }

                    // Output results
                    echo "Branches to archive: ${branchesToArchive}"
                    echo "Branches to delete: ${branchesToDelete}"

                    // Save the branches lists as environment variables
                    env.BRANCHES_TO_ARCHIVE = branchesToArchive.join(",")
                    env.BRANCHES_TO_DELETE = branchesToDelete.join(",")
                }
            }
        }

        stage('Notify Teams') {
            steps {
                script {
                    // Send email notification regardless of whether branches were found or not
                    if (env.BRANCHES_TO_ARCHIVE || env.BRANCHES_TO_DELETE) {
                        if (env.BRANCHES_TO_ARCHIVE) {
                            emailext subject: "Branches to Archive", body: "Branches to archive: ${env.BRANCHES_TO_ARCHIVE}", to: "navaneetha.22june@gmail.com"
                        }
                        if (env.BRANCHES_TO_DELETE) {
                            emailext subject: "Branches to Delete", body: "Branches to delete: ${env.BRANCHES_TO_DELETE}", to: "navaneetha.22june@gmail.com"
                        }
                    } else {
                        // Send email even if no branches are archived or deleted
                        emailext subject: "No Branches Archived or Deleted", body: "No branches met the criteria for archiving or deletion.", to: "navaneetha.22june@gmail.com"
                    }
                }
            }
        }

        stage('Archive Branches') {
            steps {
                script {
                    if (env.BRANCHES_TO_ARCHIVE) {
                        def branchesToArchive = env.BRANCHES_TO_ARCHIVE.split(",")
                        branchesToArchive.each { branch ->
                            // Check if the branch exists before attempting to archive it
                            echo "Checking if branch exists: ${branch}"
                            def branchExists = sh(script: "git show-ref refs/heads/${branch}", returnStatus: true)
                            
                            if (branchExists == 0) {
                                echo "Archiving branch: ${branch}"
                                // Checkout the branch to be archived
                                sh "git checkout ${branch}"

                                // Create a tag for archiving purposes
                                sh "git tag archived-${branch} ${branch}"

                                // Push the tag to the remote repository
                                sh "git push origin archived-${branch}"

                                // Optionally, delete the local tag after pushing it
                                sh "git tag -d archived-${branch}"
                            } else {
                                echo "Branch ${branch} not found. Skipping archive."
                            }
                        }
                    }
                }
            }
        }

        stage('Delete Branches') {
            steps {
                script {
                    if (env.BRANCHES_TO_DELETE) {
                        def branchesToDelete = env.BRANCHES_TO_DELETE.split(",")
                        branchesToDelete.each { branch ->
                            // Check if the branch exists before attempting to delete it
                            echo "Checking if branch exists: ${branch}"
                            def branchExists = sh(script: "git show-ref refs/heads/${branch}", returnStatus: true)

                            if (branchExists == 0) {
                                echo "Deleting branch: ${branch}"

                                // Fetch the latest information from the remote repository
                                sh "git fetch --prune"

                                // Delete the branch remotely using Git
                                sh "git push origin --delete ${branch}"

                                // Optionally, delete the local branch as well
                                sh "git branch -D ${branch}"
                            } else {
                                echo "Branch ${branch} not found. Skipping delete."
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after the pipeline runs
        }
    }
}
