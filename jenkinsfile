pipeline {
    agent any

    environment {
        // Define the Git credentials ID stored in Jenkins (replace with your actual credentials ID)
        GIT_CREDENTIALS = 'github-automation'
        GIT_REPO = 'https://github.com/Nava200/branch-automation.git'
    }

    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                // Checkout the repository using the configured Git credentials
                checkout scm
            }
        }

        stage('Checkout') {
            steps {
                script {
                    // Use the Git credentials defined in the environment section
                    withCredentials([usernamePassword(credentialsId: GIT_CREDENTIALS, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                        // Fetch the list of remote branches
                        def branches = sh(script: 'git branch -r', returnStdout: true).trim().split("\n")
                        def commitDate = sh(script: 'git log -1 --format=%cd origin/main', returnStdout: true).trim()

                        // Parse the commit date using SimpleDateFormat
                        def sdf = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy Z")
                        def parsedDate = sdf.parse(commitDate)

                        // Use parsedDate for further processing if needed
                        echo "Last commit date: ${parsedDate}"
                    }
                }
            }
        }

        stage('Identify Branches to Archive/Remove') {
            steps {
                script {
                    // Logic to identify branches to archive or remove
                    // Example logic (customize according to your needs)
                    def branches = sh(script: 'git branch -r', returnStdout: true).trim().split("\n")
                    def archiveBranches = []
                    
                    // Here, you can loop through the branches and apply your archiving logic
                    branches.each { branch ->
                        // Example condition (replace with actual conditions)
                        if (branch.contains("feature")) {
                            archiveBranches.add(branch)
                        }
                    }
                    
                    echo "Branches to archive: ${archiveBranches.join(', ')}"
                }
            }
        }

        stage('Notify Teams') {
            steps {
                script {
                    // Notify teams about the branches to archive or remove.
                    // Customize the email logic here
                    emailext(
                        subject: "Branches to Archive/Remove",
                        body: "Following branches need to be archived or removed: ${archiveBranches.join(', ')}",
                        to: "navaneetha.22june@gmail.com"  // Update with actual team email addresses
                    )
                }
            }
        }
    }
}
