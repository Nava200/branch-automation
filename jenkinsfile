pipeline {
    agent any

    environment {
        GIT_REPO = "https://github.com/Nava200/branch-automation.git"
        GIT_CREDENTIALS = "github-automation" // Ensure that this is correctly configured in Jenkins
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Verify Git Branches') {
            steps {
                script {
                    echo 'Fetching all remote branches'
                    sh 'git fetch --all'

                    def branches = sh(script: 'git branch -r', returnStdout: true).trim().split('\n')
                    echo "Fetched branches: ${branches}"

                    // Set the current date
                    def currentDate = java.time.LocalDate.now()
                    def formatter = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd")

                    branches.each { branch ->
                        // Checking if branch is not the main branch
                        if (!branch.contains("main")) {
                            // Get the last commit date for each branch
                            def branchName = branch.replace("origin/", "").trim()
                            echo "Checking branch: ${branchName}"

                            def commitDateStr = sh(script: "git log -1 --format=%cd origin/${branchName}", returnStdout: true).trim()
                            def commitDate = java.time.LocalDate.parse(commitDateStr, formatter)

                            // Calculate days difference
                            def daysDifference = java.time.temporal.ChronoUnit.DAYS.between(commitDate, currentDate)
                            echo "Days since last commit on ${branchName}: ${daysDifference}"

                            // Determine if the branch should be archived or deleted
                            if (daysDifference > 10 && daysDifference <= 20) {
                                echo "Archiving branch: ${branchName}"
                                // Add logic for archiving the branch, e.g., backup to a different repository or file
                            }
                            if (daysDifference > 20) {
                                echo "Deleting branch: ${branchName}"
                                // Logic to delete the branch
                                sh "git push origin --delete ${branchName}"
                            }
                        }
                    }
                }
            }
        }

        stage('Notify Teams') {
            steps {
                script {
                    echo 'Notifying teams about archived and deleted branches'
                    // Add your notification logic here, e.g., using email or Slack
                    // e.g., emailext subject: "Branch Deletion Notification", body: "Branches deleted", to: "team@example.com"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed, check logs for details'
        }
    }
}
